.container
  .row
    = form_for(@user, html: { class: "form-horizontal", role: "form" }) do |f|
      - if @user.errors.any?
        .alert.alert-danger.alert-dismissable{:role => "alert"}
          %button.close{"data-dismiss" => "alert", :type => "button"}
            %span{"aria-hidden" => "true"}
            %span.sr-only Close
          %h4
            = pluralize(@user.errors.count, error)
            prohibited this subcategory from being saved:
          %ul
            - @user.errors.full_messages.each do |msg|
              %li= msg
      .col-xs-12.col-sm-8.col-md-6.col-sm-offset-2.col-md-offset-3
        %form{:role => "form"}
          %h2
            Please Sign Up
            %small It's free and always will be.
          %hr.colorgraph
            .row
              .col-xs-12.col-sm-6.col-md-6
                .form-group
                  = f.text_field :name, id: first_name, class: form-control input-lg, placeholder: First Name, tabindex: 1
              .col-xs-12.col-sm-6.col-md-6
                .form-group
                  = f.text_field :surname, id: last_name, class: form-control input-lg, placeholder: Last Name, tabindex: 2
            .form-group
              = f.text_field :nickname, id: display_name, class: form-control input-lg, placeholder: Nickname, tabindex: 3
            .form-group
              = f.text_field :email, id: email, class: form-control input-lg, placeholder: Email, tabindex: 4
            .row
              .col-xs-12.col-sm-6.col-md-6
                .form-group
                  = f.password_field :password, id: password, class: form-control input-lg, placeholder: Password, tabindex: 5
              .col-xs-12.col-sm-6.col-md-6
                .form-group
                  = f.password_field :password_confirmation, id: password_confirmation, class: form-control input-lg, placeholder: Password Confirmation, tabindex: 6
            .row
              .col-xs-4.col-sm-3.col-md-3
                %span.button-checkbox
                  %button.btn{"data-color" => "info", :tabindex => "7", :type => "button"} I Agree
                  = f.check_box :terms_of_service, id: t_and_c, class: hidden
              .col-xs-8.col-sm-9.col-md-9
                By clicking
                = succeed "," do
                  %strong.label.label-primary Register
                %a{"data-target" => "#t_and_c_m", "data-toggle" => "modal", :href => "#"} Terms and Conditions
                set out by this site, including our Cookie Use.
            %hr.colorgraph
              .row
                .col-xs-12.col-md-6= f.submit Register, class: btn btn-primary btn-block btn-lg, tabindex: 7
                .col-xs-12.col-md-6= link_to Sign In, login_path, class: btn btn-success btn-block btn-lg
      / Modal
      #t_and_c_m.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "myModalLabel", :role => "dialog", :tabindex => "-1"}
        .modal-dialog.modal-lg
          .modal-content
            .modal-header
              %button.close{"aria-hidden" => "true", "data-dismiss" => "modal", :type => "button"} &#xD7;
              %h4#myModalLabel.modal-title Terms  Conditions
            .modal-body
              %p Will be avivable soon!
            .modal-footer
              %button.btn.btn-primary{"data-dismiss" => "modal", :type => "button"} I Agree
          / /.modal-content
        / /.modal-dialog
      / /.modal
    :javascript
      $(function () {
          $('.button-checkbox').each(function () {
      
              // Settings
              var $widget = $(this),
                  $button = $widget.find('button'),
                  $checkbox = $widget.find('input:checkbox'),
                  color = $button.data('color'),
                  settings = {
                      on: {
                          icon: 'glyphicon glyphicon-check'
                      },
                      off: {
                          icon: 'glyphicon glyphicon-unchecked'
                      }
                  };
      
              // Event Handlers
              $button.on('click', function () {
                  $checkbox.prop('checked', !$checkbox.is(':checked'));
                  $checkbox.triggerHandler('change');
                  updateDisplay();
              });
              $checkbox.on('change', function () {
                  updateDisplay();
              });
      
              // Actions
              function updateDisplay() {
                  var isChecked = $checkbox.is(':checked');
      
                  // Set the button's state
                  $button.data('state', (isChecked) ? "on" : "off");
      
                  // Set the button's icon
                  $button.find('.state-icon')
                      .removeClass()
                      .addClass('state-icon ' + settings[$button.data('state')].icon);
      
                  // Update the button's color
                  if (isChecked) {
                      $button
                          .removeClass('btn-default')
                          .addClass('btn-' + color + ' active');
                  }
                  else {
                      $button
                          .removeClass('btn-' + color + ' active')
                          .addClass('btn-default');
                  }
              }
      
              // Initialization
              function init() {
      
                  updateDisplay();
      
                  // Inject the icon if applicable
                  if ($button.find('.state-icon').length == 0) {
                      $button.prepend('');
                  }
              }
              init();
          });
      });
